ADDI $1, $0, 2
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : SW $1, IMM($2)
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 4
$1: 2
$2: 0
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $0, 28
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: SW $1, IMM($2)
1st: The next instruction has a HAZARD solved with forwarding
2ND INSTR : ADDI $2, $2, IMM
2nd: The instruction after the next has a HAZARD solved with forwarding
2ND INSTR : ADDI $2, $2, IMM
3RD INSTR : B** $2, $0, IMM
3rd: Register used as target in this instruction is used as target in the 3rd, and operand in the 4th
PC: 8
$1: 2
$2: 28
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: 2
$2: 28
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: 2
$2: 24
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: 2
$2: 24
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: 4
$2: 24
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: -4
$2: 24
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: -1
$2: 24
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: -1
$2: 24
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: -1
$2: 24
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: -1
$2: 20
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: -1
$2: 20
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: -2
$2: 20
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: 2
$2: 20
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: 5
$2: 20
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: 5
$2: 20
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: 5
$2: 20
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: 5
$2: 16
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: 5
$2: 16
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: 10
$2: 16
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: -10
$2: 16
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: -7
$2: 16
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: -7
$2: 16
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: -7
$2: 16
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: -7
$2: 12
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: -7
$2: 12
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: -14
$2: 12
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: 14
$2: 12
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: 17
$2: 12
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: 17
$2: 12
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: 17
$2: 12
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: 17
$2: 8
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: 17
$2: 8
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: 34
$2: 8
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: -34
$2: 8
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: -31
$2: 8
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: -31
$2: 8
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: -31
$2: 8
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: -31
$2: 4
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: -31
$2: 4
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: -62
$2: 4
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: 62
$2: 4
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: 65
$2: 4
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: 65
$2: 4
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: 65
$2: 4
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: 65
$2: 0
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 36
$1: 65
$2: 0
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $6, $0, 40
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 40
$1: 65
$2: 0
$3: 0
$4: 0
$5: 0
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $0, $0
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 44
$1: 65
$2: 0
$3: 0
$4: 0
$5: 0
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8196($2)
MEM INDEX FOR LW1
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 48
$1: 65
$2: 0
$3: 0
$4: 0
$5: 0
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 52
$1: 65
$2: 0
$3: 0
$4: 65
$5: 0
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8200($2)
MEM INDEX FOR LW2
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 56
$1: -31
$2: 0
$3: 0
$4: 65
$5: 0
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
2ND INSTR : *** $4, $4, $1
3RD INSTR : *** $1, $5, $4
3rd: Register used as target in this instruction is used as target in the 3rd, and operand in the 4th
PC: 60
$1: -31
$2: 0
$3: 0
$4: 34
$5: 0
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8204($2)
MEM INDEX FOR LW3
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 64
$1: 17
$2: 0
$3: 0
$4: 34
$5: 0
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $5, $4
1st: The next instruction has a HAZARD solved with forwarding
3RD INSTR : *** $5, $4, $03rd: The instruction 3 counts below this instruction has a HAZARD solved with forwarding
PC: 68
$1: 17
$2: 0
$3: 0
$4: 51
$5: 0
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
SLT $1, $5, $4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $1, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 72
$1: 1
$2: 0
$3: 0
$4: 51
$5: 0
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
BEQ $1, $0, 1
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 76
$1: 1
$2: 0
$3: 0
$4: 51
$5: 0
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $5, $4, $0
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
3RD INSTR : SW $5, IMM($0)3rd: The instruction 3 counts below this instruction has a HAZARD solved with forwarding
PC: 80
$1: 1
$2: 0
$3: 0
$4: 51
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, 4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $6, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 84
$1: 1
$2: 4
$3: 0
$4: 51
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
BNE $6, $2, -12
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 40
$1: 1
$2: 4
$3: 0
$4: 51
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $0, $0
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 44
$1: 1
$2: 4
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8196($2)
MEM INDEX FOR LW2
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 48
$1: -31
$2: 4
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 52
$1: -31
$2: 4
$3: 0
$4: -31
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8200($2)
MEM INDEX FOR LW3
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 56
$1: 17
$2: 4
$3: 0
$4: -31
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
2ND INSTR : *** $4, $4, $1
3RD INSTR : *** $1, $5, $4
3rd: Register used as target in this instruction is used as target in the 3rd, and operand in the 4th
PC: 60
$1: 17
$2: 4
$3: 0
$4: -14
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8204($2)
MEM INDEX FOR LW4
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 64
$1: -7
$2: 4
$3: 0
$4: -14
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $5, $4
1st: The next instruction has a HAZARD solved with forwarding
3RD INSTR : *** $5, $4, $03rd: The instruction 3 counts below this instruction has a HAZARD solved with forwarding
PC: 68
$1: -7
$2: 4
$3: 0
$4: -21
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
SLT $1, $5, $4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $1, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 72
$1: 0
$2: 4
$3: 0
$4: -21
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
BEQ $1, $0, 1
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 80
$1: 0
$2: 4
$3: 0
$4: -21
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, 4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $6, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 84
$1: 0
$2: 8
$3: 0
$4: -21
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
BNE $6, $2, -12
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 40
$1: 0
$2: 8
$3: 0
$4: -21
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $0, $0
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 44
$1: 0
$2: 8
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8196($2)
MEM INDEX FOR LW3
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 48
$1: 17
$2: 8
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 52
$1: 17
$2: 8
$3: 0
$4: 17
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8200($2)
MEM INDEX FOR LW4
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 56
$1: -7
$2: 8
$3: 0
$4: 17
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
2ND INSTR : *** $4, $4, $1
3RD INSTR : *** $1, $5, $4
3rd: Register used as target in this instruction is used as target in the 3rd, and operand in the 4th
PC: 60
$1: -7
$2: 8
$3: 0
$4: 10
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8204($2)
MEM INDEX FOR LW5
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 64
$1: 5
$2: 8
$3: 0
$4: 10
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $5, $4
1st: The next instruction has a HAZARD solved with forwarding
3RD INSTR : *** $5, $4, $03rd: The instruction 3 counts below this instruction has a HAZARD solved with forwarding
PC: 68
$1: 5
$2: 8
$3: 0
$4: 15
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
SLT $1, $5, $4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $1, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 72
$1: 0
$2: 8
$3: 0
$4: 15
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
BEQ $1, $0, 1
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 80
$1: 0
$2: 8
$3: 0
$4: 15
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, 4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $6, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 84
$1: 0
$2: 12
$3: 0
$4: 15
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
BNE $6, $2, -12
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 40
$1: 0
$2: 12
$3: 0
$4: 15
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $0, $0
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 44
$1: 0
$2: 12
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8196($2)
MEM INDEX FOR LW4
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 48
$1: -7
$2: 12
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 52
$1: -7
$2: 12
$3: 0
$4: -7
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8200($2)
MEM INDEX FOR LW5
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 56
$1: 5
$2: 12
$3: 0
$4: -7
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
2ND INSTR : *** $4, $4, $1
3RD INSTR : *** $1, $5, $4
3rd: Register used as target in this instruction is used as target in the 3rd, and operand in the 4th
PC: 60
$1: 5
$2: 12
$3: 0
$4: -2
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8204($2)
MEM INDEX FOR LW6
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 64
$1: -1
$2: 12
$3: 0
$4: -2
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $5, $4
1st: The next instruction has a HAZARD solved with forwarding
3RD INSTR : *** $5, $4, $03rd: The instruction 3 counts below this instruction has a HAZARD solved with forwarding
PC: 68
$1: -1
$2: 12
$3: 0
$4: -3
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
SLT $1, $5, $4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $1, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 72
$1: 0
$2: 12
$3: 0
$4: -3
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
BEQ $1, $0, 1
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 80
$1: 0
$2: 12
$3: 0
$4: -3
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, 4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $6, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 84
$1: 0
$2: 16
$3: 0
$4: -3
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
BNE $6, $2, -12
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 40
$1: 0
$2: 16
$3: 0
$4: -3
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $0, $0
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 44
$1: 0
$2: 16
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8196($2)
MEM INDEX FOR LW5
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 48
$1: 5
$2: 16
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 52
$1: 5
$2: 16
$3: 0
$4: 5
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8200($2)
MEM INDEX FOR LW6
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 56
$1: -1
$2: 16
$3: 0
$4: 5
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
2ND INSTR : *** $4, $4, $1
3RD INSTR : *** $1, $5, $4
3rd: Register used as target in this instruction is used as target in the 3rd, and operand in the 4th
PC: 60
$1: -1
$2: 16
$3: 0
$4: 4
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8204($2)
MEM INDEX FOR LW7
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 64
$1: 2
$2: 16
$3: 0
$4: 4
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $5, $4
1st: The next instruction has a HAZARD solved with forwarding
3RD INSTR : *** $5, $4, $03rd: The instruction 3 counts below this instruction has a HAZARD solved with forwarding
PC: 68
$1: 2
$2: 16
$3: 0
$4: 6
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
SLT $1, $5, $4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $1, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 72
$1: 0
$2: 16
$3: 0
$4: 6
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
BEQ $1, $0, 1
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 80
$1: 0
$2: 16
$3: 0
$4: 6
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, 4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $6, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 84
$1: 0
$2: 20
$3: 0
$4: 6
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
BNE $6, $2, -12
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 40
$1: 0
$2: 20
$3: 0
$4: 6
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $0, $0
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 44
$1: 0
$2: 20
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8196($2)
MEM INDEX FOR LW6
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 48
$1: -1
$2: 20
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 52
$1: -1
$2: 20
$3: 0
$4: -1
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8200($2)
MEM INDEX FOR LW7
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 56
$1: 2
$2: 20
$3: 0
$4: -1
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
2ND INSTR : *** $4, $4, $1
3RD INSTR : *** $1, $5, $4
3rd: Register used as target in this instruction is used as target in the 3rd, and operand in the 4th
PC: 60
$1: 2
$2: 20
$3: 0
$4: 1
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8204($2)
MEM INDEX FOR LW8
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 64
$1: 0
$2: 20
$3: 0
$4: 1
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $5, $4
1st: The next instruction has a HAZARD solved with forwarding
3RD INSTR : *** $5, $4, $03rd: The instruction 3 counts below this instruction has a HAZARD solved with forwarding
PC: 68
$1: 0
$2: 20
$3: 0
$4: 1
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
SLT $1, $5, $4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $1, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 72
$1: 0
$2: 20
$3: 0
$4: 1
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
BEQ $1, $0, 1
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 80
$1: 0
$2: 20
$3: 0
$4: 1
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, 4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $6, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 84
$1: 0
$2: 24
$3: 0
$4: 1
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
BNE $6, $2, -12
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 40
$1: 0
$2: 24
$3: 0
$4: 1
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $0, $0
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 44
$1: 0
$2: 24
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8196($2)
MEM INDEX FOR LW7
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 48
$1: 2
$2: 24
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 52
$1: 2
$2: 24
$3: 0
$4: 2
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8200($2)
MEM INDEX FOR LW8
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 56
$1: 0
$2: 24
$3: 0
$4: 2
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
2ND INSTR : *** $4, $4, $1
3RD INSTR : *** $1, $5, $4
3rd: Register used as target in this instruction is used as target in the 3rd, and operand in the 4th
PC: 60
$1: 0
$2: 24
$3: 0
$4: 2
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8204($2)
MEM INDEX FOR LW9
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 64
$1: 0
$2: 24
$3: 0
$4: 2
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $5, $4
1st: The next instruction has a HAZARD solved with forwarding
3RD INSTR : *** $5, $4, $03rd: The instruction 3 counts below this instruction has a HAZARD solved with forwarding
PC: 68
$1: 0
$2: 24
$3: 0
$4: 2
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
SLT $1, $5, $4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $1, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 72
$1: 0
$2: 24
$3: 0
$4: 2
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
BEQ $1, $0, 1
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 80
$1: 0
$2: 24
$3: 0
$4: 2
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, 4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $6, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 84
$1: 0
$2: 28
$3: 0
$4: 2
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
BNE $6, $2, -12
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 40
$1: 0
$2: 28
$3: 0
$4: 2
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $0, $0
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 44
$1: 0
$2: 28
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8196($2)
MEM INDEX FOR LW8
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 48
$1: 0
$2: 28
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 52
$1: 0
$2: 28
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8200($2)
MEM INDEX FOR LW9
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 56
$1: 0
$2: 28
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
2ND INSTR : *** $4, $4, $1
3RD INSTR : *** $1, $5, $4
3rd: Register used as target in this instruction is used as target in the 3rd, and operand in the 4th
PC: 60
$1: 0
$2: 28
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8204($2)
MEM INDEX FOR LW10
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 64
$1: 0
$2: 28
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $5, $4
1st: The next instruction has a HAZARD solved with forwarding
3RD INSTR : *** $5, $4, $03rd: The instruction 3 counts below this instruction has a HAZARD solved with forwarding
PC: 68
$1: 0
$2: 28
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
SLT $1, $5, $4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $1, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 72
$1: 0
$2: 28
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
BEQ $1, $0, 1
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 80
$1: 0
$2: 28
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, 4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $6, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 84
$1: 0
$2: 32
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
BNE $6, $2, -12
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 40
$1: 0
$2: 32
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $0, $0
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 44
$1: 0
$2: 32
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8196($2)
MEM INDEX FOR LW9
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 48
$1: 0
$2: 32
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 52
$1: 0
$2: 32
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8200($2)
MEM INDEX FOR LW10
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 56
$1: 0
$2: 32
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
2ND INSTR : *** $4, $4, $1
3RD INSTR : *** $1, $5, $4
3rd: Register used as target in this instruction is used as target in the 3rd, and operand in the 4th
PC: 60
$1: 0
$2: 32
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8204($2)
MEM INDEX FOR LW11
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 64
$1: 0
$2: 32
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $5, $4
1st: The next instruction has a HAZARD solved with forwarding
3RD INSTR : *** $5, $4, $03rd: The instruction 3 counts below this instruction has a HAZARD solved with forwarding
PC: 68
$1: 0
$2: 32
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
SLT $1, $5, $4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $1, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 72
$1: 0
$2: 32
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
BEQ $1, $0, 1
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 80
$1: 0
$2: 32
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, 4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $6, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 84
$1: 0
$2: 36
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
BNE $6, $2, -12
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 40
$1: 0
$2: 36
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $0, $0
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 44
$1: 0
$2: 36
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8196($2)
MEM INDEX FOR LW10
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 48
$1: 0
$2: 36
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 52
$1: 0
$2: 36
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8200($2)
MEM INDEX FOR LW11
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 56
$1: 0
$2: 36
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : *** $4, $4, $1
2nd: The instruction after the next has a HAZARD solved with forwarding
2ND INSTR : *** $4, $4, $1
3RD INSTR : *** $1, $5, $4
3rd: Register used as target in this instruction is used as target in the 3rd, and operand in the 4th
PC: 60
$1: 0
$2: 36
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8204($2)
MEM INDEX FOR LW12
Multi-Cycle Count: 5 Cycles
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
SOURCE REG: 4
PC: 64
$1: 0
$2: 36
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $5, $4
1st: The next instruction has a HAZARD solved with forwarding
3RD INSTR : *** $5, $4, $03rd: The instruction 3 counts below this instruction has a HAZARD solved with forwarding
PC: 68
$1: 0
$2: 36
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
SLT $1, $5, $4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $1, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 72
$1: 0
$2: 36
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
BEQ $1, $0, 1
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 80
$1: 0
$2: 36
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, 4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $6, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 84
$1: 0
$2: 40
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
BNE $6, $2, -12
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 88
$1: 0
$2: 40
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------
SW $5, 8192($0)
Multi-Cycle Count: 4 Cycles
PC: 92
$1: 0
$2: 40
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
----------NEXT INSTRUCTION----------

Final Output of Registers
B1.txt
PC: 92
$1: 0
$2: 40
$3: 0
$4: 0
$5: 51
$6: 40
$7: 0
---------CPU INFORMATION----------
SINGLE-CYCLE CPU INFORMATION:
DIC/Number  of Cycles   161
----------------------------------
MULTI-CYCLE CPU INFORMATION:
Num of 3 Cycle Instructions: 34
Num of 4 Cycle Instructions: 97
Num of 5 Cycle Instructions: 30
Total Number of Cycles:      640
----------------------------------
PIPELINED CPU INFORMATION:
Num of Data Hazard Delays: 57
Num of Ctrl Hazard Delays: 25
Total Number of Cycles:    247

MEMORY ADDRESSES ACCESSED
0x2004
0x2008
0x200c
0x2008
0x200c
0x2010
0x200c
0x2010
0x2014
0x2010
0x2014
0x2018
0x2014
0x2018
0x201c
0x2018
0x201c
0x2020
0x201c
0x2020
0x2024
0x2020
0x2024
0x2028
0x2024
0x2028
0x202c
0x2028
0x202c
0x2030

DIRECTLY MAPPED CACHE
Number of Words in Block: 4
Number of Blocks:         2
0x2004: MISS
  -->Data Addresses: 0x2000-0x200f stored in BLOCK: 0
0x2008: HIT
  -->Data was read from BLOCK:0
0x200c: HIT
  -->Data was read from BLOCK:0
0x2008: HIT
  -->Data was read from BLOCK:0
0x200c: HIT
  -->Data was read from BLOCK:0
0x2010: MISS
  -->Data Addresses: 0x2010-0x201f stored in BLOCK: 1
0x200c: HIT
  -->Data was read from BLOCK:0
0x2010: HIT
  -->Data was read from BLOCK:1
0x2014: HIT
  -->Data was read from BLOCK:1
0x2010: HIT
  -->Data was read from BLOCK:1
0x2014: HIT
  -->Data was read from BLOCK:1
0x2018: HIT
  -->Data was read from BLOCK:1
0x2014: HIT
  -->Data was read from BLOCK:1
0x2018: HIT
  -->Data was read from BLOCK:1
0x201c: HIT
  -->Data was read from BLOCK:1
0x2018: HIT
  -->Data was read from BLOCK:1
0x201c: HIT
  -->Data was read from BLOCK:1
0x2020: MISS
  -->Data Addresses: 0x2020-0x202f stored in BLOCK: 0
0x201c: HIT
  -->Data was read from BLOCK:1
0x2020: HIT
  -->Data was read from BLOCK:0
0x2024: HIT
  -->Data was read from BLOCK:0
0x2020: HIT
  -->Data was read from BLOCK:0
0x2024: HIT
  -->Data was read from BLOCK:0
0x2028: HIT
  -->Data was read from BLOCK:0
0x2024: HIT
  -->Data was read from BLOCK:0
0x2028: HIT
  -->Data was read from BLOCK:0
0x202c: HIT
  -->Data was read from BLOCK:0
0x2028: HIT
  -->Data was read from BLOCK:0
0x202c: HIT
  -->Data was read from BLOCK:0
0x2030: MISS
  -->Data Addresses: 0x2030-0x203f stored in BLOCK: 1

Mem Access Count: 30
Number of Hits:   26
Number of Misses: 4
---------------------------------DIRECTLY MAPPED CACHE
Number of Words in Block: 2
Number of Blocks:         4
0x2004: MISS
  -->Data Addresses: 0x2000-0x2007 stored in BLOCK: 0
0x2008: MISS
  -->Data Addresses: 0x2008-0x200f stored in BLOCK: 1
0x200c: HIT
  -->Data was read from BLOCK:1
0x2008: HIT
  -->Data was read from BLOCK:1
0x200c: HIT
  -->Data was read from BLOCK:1
0x2010: MISS
  -->Data Addresses: 0x2010-0x2017 stored in BLOCK: 2
0x200c: HIT
  -->Data was read from BLOCK:1
0x2010: HIT
  -->Data was read from BLOCK:2
0x2014: HIT
  -->Data was read from BLOCK:2
0x2010: HIT
  -->Data was read from BLOCK:2
0x2014: HIT
  -->Data was read from BLOCK:2
0x2018: MISS
  -->Data Addresses: 0x2018-0x201f stored in BLOCK: 3
0x2014: HIT
  -->Data was read from BLOCK:2
0x2018: HIT
  -->Data was read from BLOCK:3
0x201c: HIT
  -->Data was read from BLOCK:3
0x2018: HIT
  -->Data was read from BLOCK:3
0x201c: HIT
  -->Data was read from BLOCK:3
0x2020: MISS
  -->Data Addresses: 0x2020-0x2027 stored in BLOCK: 0
0x201c: HIT
  -->Data was read from BLOCK:3
0x2020: HIT
  -->Data was read from BLOCK:0
0x2024: HIT
  -->Data was read from BLOCK:0
0x2020: HIT
  -->Data was read from BLOCK:0
0x2024: HIT
  -->Data was read from BLOCK:0
0x2028: MISS
  -->Data Addresses: 0x2028-0x202f stored in BLOCK: 1
0x2024: HIT
  -->Data was read from BLOCK:0
0x2028: HIT
  -->Data was read from BLOCK:1
0x202c: HIT
  -->Data was read from BLOCK:1
0x2028: HIT
  -->Data was read from BLOCK:1
0x202c: HIT
  -->Data was read from BLOCK:1
0x2030: MISS
  -->Data Addresses: 0x2030-0x2037 stored in BLOCK: 2

Mem Access Count: 30
Number of Hits:   23
Number of Misses: 7
---------------------------------FULLY ASSOCIATIVE CACHE
SET ASSOCIATIVE CACHE
Number of Sets: 1
Number of Ways: 4
Number of Words in Block: 2
------Mem Cache Information------
0x2004: MISS
  -->Data Addresses 0x2000-0x2007 stored in SET: 0 , WAY: 0
0x2008: MISS
  -->Data Addresses 0x2008-0x200f stored in SET: 0 , WAY: 1
0x200c: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 1
0x2008: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 1
0x200c: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 1
0x2010: MISS
  -->Data Addresses 0x2010-0x2017 stored in SET: 0 , WAY: 2
0x200c: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 1
0x2010: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 2
0x2014: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 2
0x2010: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 2
0x2014: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 2
0x2018: MISS
  -->Data Addresses 0x2018-0x201f stored in SET: 0 , WAY: 3
0x2014: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 2
0x2018: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 3
0x201c: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 3
0x2018: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 3
0x201c: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 3
0x2020: MISS
  -->Data Addresses 0x2020-0x2027 stored in SET: 0 , WAY: 0
0x201c: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 3
0x2020: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 0
0x2024: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 0
0x2020: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 0
0x2024: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 0
0x2028: MISS
  -->Data Addresses 0x2028-0x202f stored in SET: 0 , WAY: 1
0x2024: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 0
0x2028: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 1
0x202c: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 1
0x2028: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 1
0x202c: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 1
0x2030: MISS
  -->Data Addresses 0x2030-0x2037 stored in SET: 0 , WAY: 2

Mem Access Count: 30
Number of Hits:   23
Number of Misses: 7
---------------------------------SET ASSOCIATIVE CACHE
Number of Sets: 4
Number of Ways: 2
Number of Words in Block: 2
------Mem Cache Information------
0x2004: MISS
  -->Data Addresses 0x2000-0x2007 stored in SET: 0 , WAY: 0
0x2008: MISS
  -->Data Addresses 0x2008-0x200f stored in SET: 1 , WAY: 0
0x200c: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 0
0x2008: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 0
0x200c: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 0
0x2010: MISS
  -->Data Addresses 0x2010-0x2017 stored in SET: 2 , WAY: 0
0x200c: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 0
0x2010: HIT
  -->Data was read from BLOCK in SET: 2 , WAY: 0
0x2014: HIT
  -->Data was read from BLOCK in SET: 2 , WAY: 0
0x2010: HIT
  -->Data was read from BLOCK in SET: 2 , WAY: 0
0x2014: HIT
  -->Data was read from BLOCK in SET: 2 , WAY: 0
0x2018: MISS
  -->Data Addresses 0x2018-0x201f stored in SET: 3 , WAY: 0
0x2014: HIT
  -->Data was read from BLOCK in SET: 2 , WAY: 0
0x2018: HIT
  -->Data was read from BLOCK in SET: 3 , WAY: 0
0x201c: HIT
  -->Data was read from BLOCK in SET: 3 , WAY: 0
0x2018: HIT
  -->Data was read from BLOCK in SET: 3 , WAY: 0
0x201c: HIT
  -->Data was read from BLOCK in SET: 3 , WAY: 0
0x2020: MISS
  -->Data Addresses 0x2020-0x2027 stored in SET: 0 , WAY: 1
0x201c: HIT
  -->Data was read from BLOCK in SET: 3 , WAY: 0
0x2020: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 1
0x2024: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 1
0x2020: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 1
0x2024: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 1
0x2028: MISS
  -->Data Addresses 0x2028-0x202f stored in SET: 1 , WAY: 1
0x2024: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 1
0x2028: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 1
0x202c: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 1
0x2028: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 1
0x202c: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 1
0x2030: MISS
  -->Data Addresses 0x2030-0x2037 stored in SET: 2 , WAY: 1

Mem Access Count: 30
Number of Hits:   23
Number of Misses: 7
---------------------------------SET ASSOCIATIVE CACHE
Number of Sets: 2
Number of Ways: 2
Number of Words in Block: 2
------Mem Cache Information------
0x2004: MISS
  -->Data Addresses 0x2000-0x2007 stored in SET: 0 , WAY: 0
0x2008: MISS
  -->Data Addresses 0x2008-0x200f stored in SET: 1 , WAY: 0
0x200c: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 0
0x2008: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 0
0x200c: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 0
0x2010: MISS
  -->Data Addresses 0x2010-0x2017 stored in SET: 0 , WAY: 1
0x200c: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 0
0x2010: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 1
0x2014: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 1
0x2010: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 1
0x2014: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 1
0x2018: MISS
  -->Data Addresses 0x2018-0x201f stored in SET: 1 , WAY: 1
0x2014: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 1
0x2018: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 1
0x201c: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 1
0x2018: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 1
0x201c: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 1
0x2020: MISS
  -->Data Addresses 0x2020-0x2027 stored in SET: 0 , WAY: 0
0x201c: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 1
0x2020: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 0
0x2024: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 0
0x2020: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 0
0x2024: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 0
0x2028: MISS
  -->Data Addresses 0x2028-0x202f stored in SET: 1 , WAY: 0
0x2024: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 0
0x2028: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 0
0x202c: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 0
0x2028: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 0
0x202c: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 0
0x2030: MISS
  -->Data Addresses 0x2030-0x2037 stored in SET: 0 , WAY: 1

Mem Access Count: 30
Number of Hits:   23
Number of Misses: 7
---------------------------------