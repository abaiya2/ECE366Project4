ADDI $1, $0, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
2ND INSTR : SW $1, IMM($2)
2nd: The instruction after the next has a HAZARD solved with forwarding
PC: 4
$1: 3
$2: 0
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $0, 80
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: SW $1, IMM($2)
1st: The next instruction has a HAZARD solved with forwarding
2ND INSTR : ADDI $2, $2, IMM
2nd: The instruction after the next has a HAZARD solved with forwarding
2ND INSTR : ADDI $2, $2, IMM
3RD INSTR : B** $2, $0, IMM
3rd: Register used as target in this instruction is used as target in the 3rd, and operand in the 4th
PC: 8
$1: 3
$2: 80
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: 3
$2: 80
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: 3
$2: 76
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: 3
$2: 76
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: 6
$2: 76
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: -6
$2: 76
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: -3
$2: 76
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: -3
$2: 76
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: -3
$2: 76
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: -3
$2: 72
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: -3
$2: 72
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: -6
$2: 72
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: 6
$2: 72
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: 9
$2: 72
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: 9
$2: 72
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: 9
$2: 72
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: 9
$2: 68
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: 9
$2: 68
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: 18
$2: 68
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: -18
$2: 68
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: -15
$2: 68
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: -15
$2: 68
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: -15
$2: 68
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: -15
$2: 64
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: -15
$2: 64
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: -30
$2: 64
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: 30
$2: 64
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: 33
$2: 64
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: 33
$2: 64
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: 33
$2: 64
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: 33
$2: 60
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: 33
$2: 60
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: 66
$2: 60
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: -66
$2: 60
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: -63
$2: 60
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: -63
$2: 60
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: -63
$2: 60
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: -63
$2: 56
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: -63
$2: 56
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: -126
$2: 56
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: 126
$2: 56
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: 129
$2: 56
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: 129
$2: 56
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: 129
$2: 56
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: 129
$2: 52
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: 129
$2: 52
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: 258
$2: 52
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: -258
$2: 52
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: -255
$2: 52
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: -255
$2: 52
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: -255
$2: 52
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: -255
$2: 48
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: -255
$2: 48
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: -510
$2: 48
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: 510
$2: 48
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: 513
$2: 48
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: 513
$2: 48
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: 513
$2: 48
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: 513
$2: 44
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: 513
$2: 44
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: 1026
$2: 44
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: -1026
$2: 44
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: -1023
$2: 44
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: -1023
$2: 44
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: -1023
$2: 44
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: -1023
$2: 40
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: -1023
$2: 40
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: -2046
$2: 40
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: 2046
$2: 40
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: 2049
$2: 40
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: 2049
$2: 40
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: 2049
$2: 40
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: 2049
$2: 36
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: 2049
$2: 36
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: 4098
$2: 36
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: -4098
$2: 36
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: -4095
$2: 36
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: -4095
$2: 36
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: -4095
$2: 36
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: -4095
$2: 32
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: -4095
$2: 32
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: -8190
$2: 32
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: 8190
$2: 32
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: 8193
$2: 32
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: 8193
$2: 32
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: 8193
$2: 32
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: 8193
$2: 28
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: 8193
$2: 28
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: 16386
$2: 28
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: -16386
$2: 28
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: -16383
$2: 28
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: -16383
$2: 28
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: -16383
$2: 28
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: -16383
$2: 24
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: -16383
$2: 24
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: -32766
$2: 24
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: 32766
$2: 24
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: 32769
$2: 24
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: 32769
$2: 24
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: 32769
$2: 24
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: 32769
$2: 20
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: 32769
$2: 20
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: 65538
$2: 20
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: -65538
$2: 20
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: -65535
$2: 20
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: -65535
$2: 20
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: -65535
$2: 20
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: -65535
$2: 16
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: -65535
$2: 16
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: -131070
$2: 16
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: 131070
$2: 16
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: 131073
$2: 16
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: 131073
$2: 16
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: 131073
$2: 16
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: 131073
$2: 12
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: 131073
$2: 12
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: 262146
$2: 12
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: -262146
$2: 12
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: -262143
$2: 12
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: -262143
$2: 12
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: -262143
$2: 12
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: -262143
$2: 8
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: -262143
$2: 8
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: -524286
$2: 8
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: 524286
$2: 8
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: 524289
$2: 8
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: 524289
$2: 8
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: 524289
$2: 8
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: 524289
$2: 4
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 20
$1: 524289
$2: 4
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $1, $1, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: *** $1, $0, $1
1st: The next instruction has a HAZARD solved with forwarding
1ST INSTR : *** $1, $0, $1
2ND INSTR : ADDI $1, $1, IMM
2nd: Current target reg is used as a target for next instruction and
   operand for the instruction below that
PC: 24
$1: 1048578
$2: 4
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SUB $1, $0, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: ADDI $1, $1, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 28
$1: -1048578
$2: 4
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $1, $1, 3
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 32
$1: -1048575
$2: 4
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $3, $3, -7
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
PC: 8
$1: -1048575
$2: 4
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $1, 8192($2)
Multi-Cycle Count: 4 Cycles
PC: 12
$1: -1048575
$2: 4
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, -4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 16
$1: -1048575
$2: 0
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BEQ $2, $0, 4
A STALL IS NEEDED FOR BEQ TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BEQ, WHICH NEEDS AN OPERAND
PC: 36
$1: -1048575
$2: 0
$3: 0
$4: 0
$5: 0
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $5, $0, 40
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
PC: 40
$1: -1048575
$2: 0
$3: 0
$4: 0
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8192($2)
MEM INDEX FOR LW0
Multi-Cycle Count: 5 Cycles
SOURCE REG: 0
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
PC: 44
$1: 0
$2: 0
$3: 0
$4: 0
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SLT $3, $1, $0
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $3, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 48
$1: 0
$2: 0
$3: 0
$4: 0
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BNE $0, $3, 1
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 52
$1: 0
$2: 0
$3: 0
$4: 0
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
3RD INSTR : SW $4, IMM($0)3rd: The instruction 3 counts below this instruction has a HAZARD solved with forwarding
PC: 56
$1: 0
$2: 0
$3: 0
$4: 0
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, 4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $5, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 60
$1: 0
$2: 4
$3: 0
$4: 0
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BNE $5, $2, -6
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 40
$1: 0
$2: 4
$3: 0
$4: 0
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8192($2)
MEM INDEX FOR LW1
Multi-Cycle Count: 5 Cycles
SOURCE REG: 0
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
PC: 44
$1: -1048575
$2: 4
$3: 0
$4: 0
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SLT $3, $1, $0
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $3, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 48
$1: -1048575
$2: 4
$3: 1
$4: 0
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BNE $0, $3, 1
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 56
$1: -1048575
$2: 4
$3: 1
$4: 0
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, 4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $5, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 60
$1: -1048575
$2: 8
$3: 1
$4: 0
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BNE $5, $2, -6
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 40
$1: -1048575
$2: 8
$3: 1
$4: 0
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8192($2)
MEM INDEX FOR LW2
Multi-Cycle Count: 5 Cycles
SOURCE REG: 0
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
PC: 44
$1: 524289
$2: 8
$3: 1
$4: 0
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SLT $3, $1, $0
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $3, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 48
$1: 524289
$2: 8
$3: 0
$4: 0
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BNE $0, $3, 1
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 52
$1: 524289
$2: 8
$3: 0
$4: 0
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
3RD INSTR : SW $4, IMM($0)3rd: The instruction 3 counts below this instruction has a HAZARD solved with forwarding
PC: 56
$1: 524289
$2: 8
$3: 0
$4: 524289
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, 4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $5, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 60
$1: 524289
$2: 12
$3: 0
$4: 524289
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BNE $5, $2, -6
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 40
$1: 524289
$2: 12
$3: 0
$4: 524289
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8192($2)
MEM INDEX FOR LW3
Multi-Cycle Count: 5 Cycles
SOURCE REG: 0
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
PC: 44
$1: -262143
$2: 12
$3: 0
$4: 524289
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SLT $3, $1, $0
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $3, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 48
$1: -262143
$2: 12
$3: 1
$4: 524289
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BNE $0, $3, 1
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 56
$1: -262143
$2: 12
$3: 1
$4: 524289
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, 4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $5, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 60
$1: -262143
$2: 16
$3: 1
$4: 524289
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BNE $5, $2, -6
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 40
$1: -262143
$2: 16
$3: 1
$4: 524289
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8192($2)
MEM INDEX FOR LW4
Multi-Cycle Count: 5 Cycles
SOURCE REG: 0
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
PC: 44
$1: 131073
$2: 16
$3: 1
$4: 524289
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SLT $3, $1, $0
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $3, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 48
$1: 131073
$2: 16
$3: 0
$4: 524289
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BNE $0, $3, 1
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 52
$1: 131073
$2: 16
$3: 0
$4: 524289
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
3RD INSTR : SW $4, IMM($0)3rd: The instruction 3 counts below this instruction has a HAZARD solved with forwarding
PC: 56
$1: 131073
$2: 16
$3: 0
$4: 655362
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, 4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $5, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 60
$1: 131073
$2: 20
$3: 0
$4: 655362
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BNE $5, $2, -6
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 40
$1: 131073
$2: 20
$3: 0
$4: 655362
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8192($2)
MEM INDEX FOR LW5
Multi-Cycle Count: 5 Cycles
SOURCE REG: 0
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
PC: 44
$1: -65535
$2: 20
$3: 0
$4: 655362
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SLT $3, $1, $0
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $3, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 48
$1: -65535
$2: 20
$3: 1
$4: 655362
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BNE $0, $3, 1
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 56
$1: -65535
$2: 20
$3: 1
$4: 655362
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, 4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $5, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 60
$1: -65535
$2: 24
$3: 1
$4: 655362
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BNE $5, $2, -6
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 40
$1: -65535
$2: 24
$3: 1
$4: 655362
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8192($2)
MEM INDEX FOR LW6
Multi-Cycle Count: 5 Cycles
SOURCE REG: 0
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
PC: 44
$1: 32769
$2: 24
$3: 1
$4: 655362
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SLT $3, $1, $0
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $3, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 48
$1: 32769
$2: 24
$3: 0
$4: 655362
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BNE $0, $3, 1
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 52
$1: 32769
$2: 24
$3: 0
$4: 655362
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
3RD INSTR : SW $4, IMM($0)3rd: The instruction 3 counts below this instruction has a HAZARD solved with forwarding
PC: 56
$1: 32769
$2: 24
$3: 0
$4: 688131
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, 4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $5, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 60
$1: 32769
$2: 28
$3: 0
$4: 688131
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BNE $5, $2, -6
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 40
$1: 32769
$2: 28
$3: 0
$4: 688131
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8192($2)
MEM INDEX FOR LW7
Multi-Cycle Count: 5 Cycles
SOURCE REG: 0
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
PC: 44
$1: -16383
$2: 28
$3: 0
$4: 688131
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SLT $3, $1, $0
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $3, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 48
$1: -16383
$2: 28
$3: 1
$4: 688131
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BNE $0, $3, 1
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 56
$1: -16383
$2: 28
$3: 1
$4: 688131
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, 4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $5, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 60
$1: -16383
$2: 32
$3: 1
$4: 688131
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BNE $5, $2, -6
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 40
$1: -16383
$2: 32
$3: 1
$4: 688131
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8192($2)
MEM INDEX FOR LW8
Multi-Cycle Count: 5 Cycles
SOURCE REG: 0
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
PC: 44
$1: 8193
$2: 32
$3: 1
$4: 688131
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SLT $3, $1, $0
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $3, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 48
$1: 8193
$2: 32
$3: 0
$4: 688131
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BNE $0, $3, 1
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 52
$1: 8193
$2: 32
$3: 0
$4: 688131
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADD $4, $4, $1
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
3RD INSTR : SW $4, IMM($0)3rd: The instruction 3 counts below this instruction has a HAZARD solved with forwarding
PC: 56
$1: 8193
$2: 32
$3: 0
$4: 696324
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, 4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $5, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 60
$1: 8193
$2: 36
$3: 0
$4: 696324
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BNE $5, $2, -6
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 40
$1: 8193
$2: 36
$3: 0
$4: 696324
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
LW $1, 8192($2)
MEM INDEX FOR LW9
Multi-Cycle Count: 5 Cycles
SOURCE REG: 0
SOURCE REG: 1
A DELAY WILL BE REQUIRED FOR LW
PC: 44
$1: -4095
$2: 36
$3: 0
$4: 696324
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SLT $3, $1, $0
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $3, $0, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 48
$1: -4095
$2: 36
$3: 1
$4: 696324
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BNE $0, $3, 1
A STALL IS NEEDED FOR BNE TO FLUSH THE NEXT INSTR
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 56
$1: -4095
$2: 36
$3: 1
$4: 696324
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
ADDI $2, $2, 4
Multi-Cycle Count: 4 Cycles
(1st Refers to the next instruction, 2ND to the instruction after that, etc...)
1ST INSTR: B** $2, $5, IMM
1st: The next instruction has a HAZARD solved with forwarding
PC: 60
$1: -4095
$2: 40
$3: 1
$4: 696324
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
BNE $5, $2, -6
Multi-Cycle Count: 3 Cycles
A STALL IS NEEDED FOR BNE, WHICH NEEDS AN OPERAND
PC: 64
$1: -4095
$2: 40
$3: 1
$4: 696324
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------
SW $4, 8192($0)
Multi-Cycle Count: 4 Cycles
PC: 68
$1: -4095
$2: 40
$3: 1
$4: 696324
$5: 40
$6: 0
$7: 0
----------NEXT INSTRUCTION----------

Final Output of Registers
A2.txt
PC: 68
$1: -4095
$2: 40
$3: 1
$4: 696324
$5: 40
$6: 0
$7: 0
---------CPU INFORMATION----------
SINGLE-CYCLE CPU INFORMATION:
DIC/Number  of Cycles   196
----------------------------------
MULTI-CYCLE CPU INFORMATION:
Num of 3 Cycle Instructions: 60
Num of 4 Cycle Instructions: 126
Num of 5 Cycle Instructions: 10
Total Number of Cycles:      734
----------------------------------
PIPELINED CPU INFORMATION:
Num of Data Hazard Delays: 50
Num of Ctrl Hazard Delays: 34
Total Number of Cycles:    284

MEMORY ADDRESSES ACCESSED
0x2000
0x2004
0x2008
0x200c
0x2010
0x2014
0x2018
0x201c
0x2020
0x2024

DIRECTLY MAPPED CACHE
Number of Words in Block: 4
Number of Blocks:         2
0x2000: MISS
  -->Data Addresses: 0x2000-0x200f stored in BLOCK: 0
0x2004: HIT
  -->Data was read from BLOCK:0
0x2008: HIT
  -->Data was read from BLOCK:0
0x200c: HIT
  -->Data was read from BLOCK:0
0x2010: MISS
  -->Data Addresses: 0x2010-0x201f stored in BLOCK: 1
0x2014: HIT
  -->Data was read from BLOCK:1
0x2018: HIT
  -->Data was read from BLOCK:1
0x201c: HIT
  -->Data was read from BLOCK:1
0x2020: MISS
  -->Data Addresses: 0x2020-0x202f stored in BLOCK: 0
0x2024: HIT
  -->Data was read from BLOCK:0

Mem Access Count: 10
Number of Hits:   7
Number of Misses: 3
---------------------------------DIRECTLY MAPPED CACHE
Number of Words in Block: 2
Number of Blocks:         4
0x2000: MISS
  -->Data Addresses: 0x2000-0x2007 stored in BLOCK: 0
0x2004: HIT
  -->Data was read from BLOCK:0
0x2008: MISS
  -->Data Addresses: 0x2008-0x200f stored in BLOCK: 1
0x200c: HIT
  -->Data was read from BLOCK:1
0x2010: MISS
  -->Data Addresses: 0x2010-0x2017 stored in BLOCK: 2
0x2014: HIT
  -->Data was read from BLOCK:2
0x2018: MISS
  -->Data Addresses: 0x2018-0x201f stored in BLOCK: 3
0x201c: HIT
  -->Data was read from BLOCK:3
0x2020: MISS
  -->Data Addresses: 0x2020-0x2027 stored in BLOCK: 0
0x2024: HIT
  -->Data was read from BLOCK:0

Mem Access Count: 10
Number of Hits:   5
Number of Misses: 5
---------------------------------FULLY ASSOCIATIVE CACHE
SET ASSOCIATIVE CACHE
Number of Sets: 1
Number of Ways: 4
Number of Words in Block: 2
------Mem Cache Information------
0x2000: MISS
  -->Data Addresses 0x2000-0x2007 stored in SET: 0 , WAY: 0
0x2004: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 0
0x2008: MISS
  -->Data Addresses 0x2008-0x200f stored in SET: 0 , WAY: 1
0x200c: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 1
0x2010: MISS
  -->Data Addresses 0x2010-0x2017 stored in SET: 0 , WAY: 2
0x2014: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 2
0x2018: MISS
  -->Data Addresses 0x2018-0x201f stored in SET: 0 , WAY: 3
0x201c: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 3
0x2020: MISS
  -->Data Addresses 0x2020-0x2027 stored in SET: 0 , WAY: 0
0x2024: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 0

Mem Access Count: 10
Number of Hits:   5
Number of Misses: 5
---------------------------------SET ASSOCIATIVE CACHE
Number of Sets: 4
Number of Ways: 2
Number of Words in Block: 2
------Mem Cache Information------
0x2000: MISS
  -->Data Addresses 0x2000-0x2007 stored in SET: 0 , WAY: 0
0x2004: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 0
0x2008: MISS
  -->Data Addresses 0x2008-0x200f stored in SET: 1 , WAY: 0
0x200c: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 0
0x2010: MISS
  -->Data Addresses 0x2010-0x2017 stored in SET: 2 , WAY: 0
0x2014: HIT
  -->Data was read from BLOCK in SET: 2 , WAY: 0
0x2018: MISS
  -->Data Addresses 0x2018-0x201f stored in SET: 3 , WAY: 0
0x201c: HIT
  -->Data was read from BLOCK in SET: 3 , WAY: 0
0x2020: MISS
  -->Data Addresses 0x2020-0x2027 stored in SET: 0 , WAY: 1
0x2024: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 1

Mem Access Count: 10
Number of Hits:   5
Number of Misses: 5
---------------------------------SET ASSOCIATIVE CACHE
Number of Sets: 2
Number of Ways: 2
Number of Words in Block: 2
------Mem Cache Information------
0x2000: MISS
  -->Data Addresses 0x2000-0x2007 stored in SET: 0 , WAY: 0
0x2004: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 0
0x2008: MISS
  -->Data Addresses 0x2008-0x200f stored in SET: 1 , WAY: 0
0x200c: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 0
0x2010: MISS
  -->Data Addresses 0x2010-0x2017 stored in SET: 0 , WAY: 1
0x2014: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 1
0x2018: MISS
  -->Data Addresses 0x2018-0x201f stored in SET: 1 , WAY: 1
0x201c: HIT
  -->Data was read from BLOCK in SET: 1 , WAY: 1
0x2020: MISS
  -->Data Addresses 0x2020-0x2027 stored in SET: 0 , WAY: 0
0x2024: HIT
  -->Data was read from BLOCK in SET: 0 , WAY: 0

Mem Access Count: 10
Number of Hits:   5
Number of Misses: 5
---------------------------------